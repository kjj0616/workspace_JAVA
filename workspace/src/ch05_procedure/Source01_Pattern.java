package ch05_procedure;
/*
	모든 프로그램언어는 이때까지 살펴봤던 데이터를 처리할수 있게 되있다.
	어쨌든 프로그램의 목적은 데이터 처리이기 때문에 branch를 못 만든다거나 loop처리를 지원안하면
	프로그램언어로써 가치가 없다.

	데이터처리, 혹은 관리를 좀더 효율적으로 할수 있게 방법론들이 떠올랐는데 
	어디에 초점을 맞추냐에 따라	프로그래밍 언어의 특징이 갈리게 된다.

	자바를 비롯한 현재 주로 사용되는 언어들은 객체지향방식(OGP/Object Oriented Programming)이 대부분이지만,
	객체라는건 프로시저방식(Procedural Programming, 절차지향방식)의 한계를 극복하기 위해 만들어진 방식이라
	일단 프로시저라는걸 이해해야 객체지향을 이해할수 있다.

	About, 절차적 프로그래밍 (Procedural Programming)
		(≠순서, 순차)
		프로그래밍에서는 프로시저 라는게 절차라는 것보다는 
			프로시저는 루틴이나, 서브루틴 및 함수와 같은 뜻으로 사용되며,
				특정 작업을 수행할수 있게 처리해둔 작업 묶음을 나타낸다. 프로시저 = 함수,메소드 등등...
		
		절차적 프로그래밍은
			프로그램에서 필요한 일련의 작업들을 단위단위로 미리 만들어두고
			이것들을 이용해서 데이터 처리과정의 효율성을 높이자는 중점을 둔 방식이다.
*/
class Source01_Pattern {
	public static void main(String[] args)	{
		System.out.println(Math.pow(3,4) ); //실수형데이터(double), 3의 4제곱, 제곱값 구하기
		double r =Math.pow(2,5); 
		System.out.println("r = "+r);
		// 위 Math.pow는 ( )안에 숫자 두개를 설정하면,
		// 설정치킨 데이터를 토대로 제곱값을 계산해주는 프로시저이다.

		System.out.println(Math.sqrt(256)); // 제곱근을 구하는 프로시저
		double e = Math.sqrt(625); //제곱근을 구하는 프로시저
		System.out.println(e);

		/*
			실제 java 는 객체지향을 하기에 최적화가 된 언어이긴 하나,
									필요하다면 절차지향 방식도 구현이 가능하다.
			일단은 객체를 하기 전에 이 방식을 살펴보자.
		*/

	}
}
